!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var s=t();for(var i in s)("object"==typeof exports?exports:e)[i]=s[i]}}(self,(()=>(()=>{"use strict";var e={d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{ServiceCatalogManager:()=>g});const s={service_item:"service_item_placeholder",assigned_asset:"asset_placeholder",assigned_software_license:"software_license_placeholder"};function i(e){return e.test(window.location.pathname)}function a(e,t){let s=0;function i(){s++,s===e.filter((e=>"script"===e.type)).length&&t()}e.forEach((e=>{!function(e,t,s){const i=document.createElement(t);"link"===t?(i.rel="stylesheet",i.type="text/css",i.href=e):"script"===t&&(i.type="text/javascript",i.src=e,i.onload=s),document.head.appendChild(i)}(e.url,e.type,i)}))}function r(e){return/^\d*_my_assigned_assets$/.test(e)}function n(e){let t=e.type,i=null;return i=t?s[t]:s.service_item,`https://raw.githubusercontent.com/mehboobali98/service-catalog/service_catalog/v1/assets/svg/${i}.svg`}function o(e){const t=$("<div>").attr("id","loading_icon_container").addClass(e),s=$("<div>").addClass("d-flex flex-column align-items-center"),i=$("<img>").attr({src:"https://s2.svgbox.net/loaders.svg?ic=puff",alt:"Loading..."});return s.append(i),t.append(s),t}function c(e){let t=e.service_items.assets||[],s=e.service_items.software_entitlements||[];return t.concat(s)}class d{constructor(e,t){this.ezoFieldId=e,this.ezoSubdomain=t}updateRequestForm(){const e=this,t=this.extractRequestId(),s="/api/v2/requests/"+t;this.hideAssetsCustomField(),$.getJSON(s).done((s=>{const i=s.request.custom_fields.find((function(t){return t.id==e.ezoFieldId}));if(!i||!i.value)return!0;const a={method:"GET",headers:{}};return e.withToken((s=>{if(s){a.headers.Authorization="Bearer "+s;const r=JSON.parse(i.value),n=r.assets.map((e=>Object.keys(e)[0])),o=r.assets.map((e=>Object.values(e)[0]));if(!n||0==n.length)return!0;"true"!=r.linked&&e.linkAssets(t,n),o&&(e.addEZOContainer(),o.map((t=>{e.showLinkedAsset(t)})))}}))}))}extractRequestId(){return window.location.pathname.split("/").pop()}hideAssetsCustomField(){const e=$("dd:contains('{\"assets\":[{')");e[0]&&(e[0].style.display="none",e[0].previousElementSibling.style.display="none")}withToken(e){return $.getJSON("/hc/api/v2/integration/token").then((t=>e(t.token)))}linkAssets(e,t){$.ajax({url:"https://"+this.ezoSubdomain+"/webhooks/zendesk/sync_tickets_to_assets_relation.json",type:"POST",data:{ticket:{ticket_id:e,assets_field_id:this.ezoFieldId}}})}addEZOContainer(){$("dl.request-details").last().after('<dl class="request-details" id="ezo-assets-container"><dt>AssetSonar Assets</dt><dd><ul></ul></dd></dl>')}showLinkedAsset(e){const t=this.getAssetUrl(e),s=$("#ezo-assets-container dd ul");t?s.append("<li><a target='_blank' href='"+t+"'>"+e+"</a></li>"):s.append("<li>"+e+"</li>")}getAssetUrl(e){if(!e)return null;const t=(e=e.trim()).match(/^(Asset|Asset Stock|Software License) # (\d+) /);if(!t)return null;const s=t[2],i=t[1];return"https://"+this.ezoSubdomain+this.getAssetPath(s,i)}getAssetPath(e,t){return({Asset:"/assets/","Stock Asset":"/stock_assets/","Software License":"/software_licenses/"}[t]||"/dashboard")+e}}class l{constructor(e,t,s){this.ezoFieldId=e,this.ezoSubdomain=t,this.ezoServiceItemFieldId=s}updateRequestForm(){a(this.filesToLoad(),(()=>{this.updateForm()}))}updateForm(){if("-"===$(".nesty-input")[0].text)return;const e=this.extractQueryParams(window.location),t=e.get("item_name"),s=this.prepareSubject(e);s&&$("#request_subject").val(s),$("#request_custom_fields_"+this.ezoServiceItemFieldId).val(t),this.getTokenAndFetchAssignedAssets()}extractQueryParams(e){return new URL(e).searchParams}getTokenAndFetchAssignedAssets(){return this.withToken().then((e=>{if(e){const t={method:"GET",headers:{Authorization:"Bearer "+e,"ngrok-skip-browser-warning":!0}},s="https://"+this.ezoSubdomain+"/webhooks/zendesk/user_assigned_assets_and_software_entitlements.json";return this.populateAssignedAssets(s,t)}}))}withToken(){return $.getJSON("/hc/api/v2/integration/token").then((e=>e.token))}populateAssignedAssets(e,t){fetch(e,t).then((e=>e.json())).then((s=>{const i={data:[]},a=$("#request_custom_fields_"+this.ezoFieldId);this.processData(s.assets,i,"Asset"),this.processData(s.software_entitlements,i,"Software License"),a.hide(),a.after("<select multiple='multiple' id='ezo-asset-select' style='width: 100%;'></select>"),this.renderSelect2PaginationForUsers($("#ezo-asset-select"),e,t),this.preselectAssetsCustomField(this.extractQueryParams(window.location)),$("form.request-form").on("submit",(function(){var e=$("#ezo-asset-select").val();if(e.length>0){let t=i.data.filter((t=>e.includes(t.id.toString())));t=t.map((e=>({[e.id]:e.text}))),a.val(JSON.stringify({assets:t}))}}))}))}renderSelect2PaginationForUsers(e,t,s){e.select2({dropdownParent:e.parents("body"),ajax:{url:t,delay:250,headers:s.headers,dataType:"json",data:function(t){return{page:t.page||1,search:t.term,include_blank:$(e).data("include-blank")}},processResults:function(e,t){var s=$.map(e.assets,(function(e){var t=e.sequence_num;return{id:t,text:`Asset # ${t} - ${e.name}`}})),i=$.map(e.software_entitlements,(function(e){var t=e.sequence_num;return{id:t,text:`Software License # ${t} - ${e.name}`}}));return{results:s.concat(i),pagination:{more:e.page<e.total_pages}}}}})}prepareSubject(e){const t=e.get("item_name"),s=e.get("service_category");return null==t||null==s?null:`${s} - ${t}`}preselectAssetsCustomField(e){let t=$("#request_custom_fields_"+this.ezoFieldId);if(!this.assetsCustomFieldPresent(t))return;let s=e.get("item_id"),i=e.get("item_name");if(!i||!s)return;let a=$("#ezo-asset-select");if(0===a.length&&this.renderEzoSelect2Field(t),a.find("option[value='"+s+"']").length)a.val(s).trigger("change");else{var r=new Option(i,s,!0,!0);a.append(r).trigger("change")}}assetsCustomFieldPresent(e){return e.length>0}renderEzoSelect2Field(e){e.hide(),e.after("<select multiple='multiple' id='ezo-asset-select' style='width: 100%;'></select>")}filesToLoad(){return[{type:"link",url:"https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.css"},{type:"script",url:"https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"}]}processData(e,t,s){e&&$.each(e,(function(e,i){var a=i.sequence_num;t.data[a]={id:a,text:`${s} # ${a} - ${i.name}`}}))}}class u{constructor(){this.currency=null,this.serviceCategoriesItems=null}build(e){this.currency=e.currency,this.serviceCategoriesItems=e.service_catalog_data,$.each(this.serviceCategoriesItems,((e,t)=>{let s=$(`#${e}_container`);if(!r(e)&&t.service_items){let i=JSON.parse(t.service_items);$.each(i,((t,i)=>{s.after(this.buildDetailPage(e,i)),this.bindItemDetailEventListener(e,i)}))}}))}buildDetailPage(e,t){const s=t.display_fields,i=`detail_page_container${t.id}${e}${s.title.value}`,a={},r=$("<div>").attr("id",i).addClass("row").css({display:"none","margin-top":"38px","margin-right":"184px"}),o=$("<div>").addClass("col-3"),c=n(t),d=$("<img>").attr("src",t.display_picture_url||c).attr("alt","placeholder image").addClass("w-100").on("error",(function(){$(this).attr("src",c)}));o.append(d),getComputedStyle(document.documentElement).getPropertyValue("--ez_text_font");const l=getComputedStyle(document.documentElement).getPropertyValue("--ez_text_color"),u=getComputedStyle(document.documentElement).getPropertyValue("--ez_heading_font"),p=$("<div>").addClass("col-9"),h=$("<div>").addClass("d-flex justify-content-between"),m=$("<div>").append($("<p>").text(s.title.value).css({color:l,"line-height":"17px","font-family":u,"font-weight":"600","font-size":"16px"}));s.cost_price&&m.append($("<p>").text(`${this.currency} ${parseFloat(s.cost_price.value)}`).css({color:l,"line-height":"17px","font-family":u,"font-size":"14px"})),a.item_name=s.title.value,a.ticket_form_id=t.zendesk_form_id,a.service_category=this.serviceCategoriesItems[e].title;const v=`/hc/requests/new?${$.param(a)}`,g=$("<div>").addClass("request-service-btn-container"),_=$("<a>").attr("href",v).text("Request Service").addClass("btn btn-outline-primary request-service-btn");g.append(_),h.append(m,g);const f=$("<div>").addClass("mt-3");return Object.keys(s).length&&$.each(s,((e,t)=>{if("description"==e){let e=$("<section>"),s=$("<p>").text(t.label).css({color:l,"line-height":"17px","font-style":u,"font-weight":"600","font-size":"16px"}),i=this.prepareSectionContent(t);e.append(s,i),f.append(e)}})),p.append(h,f),r.append(o,p),r}prepareSectionContent(e){const t=getComputedStyle(document.documentElement).getPropertyValue("--ez_text_font"),s=getComputedStyle(document.documentElement).getPropertyValue("--ez_text_color"),i=e.value,a=e.format;if(!a)return $("<p>").text(i).css({color:s,"font-size":"14px","font-weight":"400","line-height":"17px","font-family":t,"font-size":"12px"});if("list"===a){const e=$("<ul>").addClass("service-item-detail-description-list"),t=i.split(",");return $.each(t,(function(t,s){let i=$("<li>").text(s);e.append(i)})),e}}bindItemDetailEventListener(e,t){$("body").on("click",".js-service-item-detail-page-btn, .js-default-service-item",(function(e){e.preventDefault();const t=$(this).data("id"),s=$(this).data("name"),i=$(this).data("container-id"),a=$(`#${i}`),r=`detail_page_container${t}${s}`,n=$(document.getElementById(r));$("#service_catalog_item_search_results_container").hide(),a.hide(),$("[id*='_service_items_container']").hide(),$("#service_items_container").show(),n.show()}))}}class p{constructor(){this.currency=null,this.zendeskFormData=null,this.serviceCategoriesItems=null}build(e){this.currency=e.currency,this.serviceCategoriesItems=e.service_catalog_data;const t=Object.keys(this.serviceCategoriesItems),s=$("<div>").attr("id","service_items_container").addClass("col-10 service-items-container");return t.forEach(((e,t)=>{const i=this.serviceCategoriesItems[e];s.append(this.buildServiceCategoryItems(e,i,0===t))})),s}buildServiceCategoryItems(e,t,s){const i=$("<div>");i.attr("id",`${e}_container`),s||i.addClass("collapse");const a=$("<p>").text(t.title).addClass("service-category-label"),n=$("<p>").text(t.description).addClass("service-category-description");i.append(a,n);const d=$("<div>").attr("id",`${e}_service_items_container`);s||d.append(o("col-10"));const l=$("<div>").addClass("d-flex flex-wrap gap-3");let u=[];return r(e)?(u=c(t),this.zendeskFormData=t.zendesk_form_data):u=t.service_items?JSON.parse(t.service_items):[],u.length&&u.forEach(((t,s)=>{t&&l.append(this.buildServiceCategoryItem(e,t))})),d.append(l),i.append(d),i}buildServiceCategoryItem(e,t){return r(e)?this.buildItAssetServiceItem(e,t):this.buildDefaultServiceItem(e,t)}buildItAssetServiceItem=(e,t)=>{const s=$("<div>").addClass("row service-item-card"),i={},a=$("<div>").addClass("col-4"),r=$("<div>").addClass("d-flex flex-column h-100"),o=n(t),c=$("<img>").attr("src",t.display_picture_url).attr("alt","IT Asset").addClass("w-100").on("error",(function(){$(this).attr("src",o)}));r.append(c),a.append(r);const d=$("<div>").addClass("col-8 card-body"),l=t.name,u=this.fieldValueElement(l,"p",20).addClass("card-title");d.append(u);const p=$("<div>").addClass("card-content-container"),h=$("<table>").addClass("card-content-table"),m=t.asset_columns||t.software_license_columns;$.each(m,((e,t)=>{let s=$("<tr>");s.append(this.fieldValueElement(e||"--","th",e.length)),s.append(this.fieldValueElement(t||"--","td",15)),h.append(s)})),p.append(h),d.append(p),i.item_id=t.sequence_num,i.item_name=l,i.ticket_form_id=this.zendeskFormId(t),i.service_category=this.serviceCategoriesItems[e].title;const v=`/hc/requests/new?${$.param(i)}`,g=$("<div>").addClass("it-asset-card-footer w-100"),_=$("<a>").attr("href",v).text("Report Issue").addClass("float-end footer-text");return _.append($("<span>").html("&#8594;").addClass("footer-arrow")),g.append(_),d.append(g),s.append(a,d),s.click((function(e){e.preventDefault(),window.location.href=v})),s};buildDefaultServiceItem(e,t){const s=t.display_fields,i=$("<div>").addClass("row service-item-card border border-light js-default-service-item").data("id",`${t.id}${e}`).data("name",s.title.value).data("container-id",`${e}_service_items_container`),a=$("<div>").addClass("col-4"),r=$("<div>").addClass("d-flex flex-column h-100"),o=n(t),c=$("<img>").attr("src",t.display_picture_url||o).attr("alt","Software").addClass("w-100").on("error",(function(){$(this).attr("src",o)}));r.append(c),a.append(r);const d=$("<div>").addClass("col-8 card-body"),l=s.title.value,u=$("<p>").text(l).addClass("card-title");d.append(u);const p=$("<p>").text(s.short_description.value).addClass("description");d.append(p);const h=$("<div>").addClass("card-footer w-100"),m=$("<span>").html("&#8594;").addClass("footer-arrow float-end js-service-item-detail-page-btn").data("id",`${t.id}${e}`).data("name",s.title.value).data("container-id",`${e}_service_items_container`),v=$("<a>").attr("href","#_");if(v.append(m),s.cost_price){const e=$("<span>").text(`${this.currency} ${parseFloat(s.cost_price.value)}`);h.append(e)}return h.append(v),d.append(h),i.append(a,d),i}fieldValueElement(e,t,s){const i=$(`<${t}>`),a=e.length>s;if(!a)return i.text(e);const r=a?`${e.substring(0,s)}...`:e;return i.text(r).attr("title",e).attr("data-toggle","tooltip")}zendeskFormId(e){const t=e.type;return"assigned_asset"===t?this.zendeskFormData.assets:"assigned_software_license"===t?this.zendeskFormData.software_entitlements:void 0}buildAndRenderServiceItems=(e,t)=>{const s=e.service_catalog_data;this.currency=e.currency;const i=Object.keys(s)[0],a=s[i];$(t).children().first().hide();const n=$(t).children().last();n.empty();let o=[];o=r(i)?c(a):a.service_items?JSON.parse(a.service_items):[],o.length&&o.forEach(((e,t)=>{e&&n.append(this.buildServiceCategoryItem(i,e))})),r(i)||(new u).build(e)}}class h{constructor(){this.itemBuilder=null,this.itemDetailBuilder=null}updateResults=(e,t)=>{const s=t.searchResultsContainer;if(s.empty(),!e.search_results.length)return void s.append(function(){const e=$("<div>").attr("id","no_results_container").addClass("d-flex flex-column align-items-center no-results-container"),t=$("<img>").attr("src","https://raw.githubusercontent.com/mehboobali98/service-catalog/service_catalog/v1/assets/svg/no_results_found.svg").addClass("no-results-image"),s=$("<p>").text("No Result Found").addClass("no-results-message");return e.append(t,s),e}());self=this,self.itemBuilder=t.itemBuilder;const i=$("<div>").addClass("d-flex flex-wrap gap-3");self.itemDetailBuilder=t.itemDetailBuilder;const a=Array.isArray(e.search_results)?e.search_results:JSON.parse(e.search_results);$.each(a,(function(e,t){if(t){let e=t.service_category_title_with_id,s=self.itemBuilder.buildServiceCategoryItem(e,t);self.itemDetailBuilder.bindItemDetailEventListener(s),i.append(s)}})),s.append(i)}}class m{constructor(e){this.ezoSubdomain=e}fetchServiceCategoriesAndItems(e,t,s){$.getJSON("/hc/api/v2/integration/token").then((e=>e.token)).then((i=>{if(i){const a="visible_service_categories_and_items",r={},n={method:"GET",headers:{Authorization:"Bearer "+i,"ngrok-skip-browser-warning":!0}};s.searchQuery&&(r.search_query=s.searchQuery);const o="https://"+this.ezoSubdomain+"/webhooks/zendesk/"+a+".json?"+$.param(r);fetch(o,n).then((e=>{if(400===e.status)throw new Error("Bad Request: There was an issue with the request.");if(404===e.status)return t();if(!e.ok)throw new Error("Network response was not ok");return e.json()})).then((t=>{$("#loading_icon_container").empty(),e(t,s)})).catch((e=>{console.error("An error occurred while fetching service categories and items: "+e.message)}))}}))}fetchServiceCategoryItems(e,t,s){$.getJSON("/hc/api/v2/integration/token").then((e=>e.token)).then((i=>{if(i){const a={method:"GET",headers:{Authorization:"Bearer "+i,"ngrok-skip-browser-warning":!0}},r="visible_service_categories_and_items",n={service_category_id:e},o="https://"+this.ezoSubdomain+"/webhooks/zendesk/"+r+".json?"+$.param(n);$("#loading_icon_container").show(),fetch(o,a).then((e=>{if(400===e.status)throw new Error("Bad Request: There was an issue with the request.");if(404===e.status)return noAccessPageCallback();if(!e.ok)throw new Error("Network response was not ok");return e.json()})).then((e=>{t(e,s.serviceItemsContainerId)})).catch((e=>{console.error("An error occurred while fetching service categories and items: "+e.message)}))}}))}withToken(){return $.getJSON("/hc/api/v2/integration/token").then((e=>e.token))}}class v{constructor(e){this.apiService=new m(e),this.ezoSubdomain=e,this.serviceCatalogItemBuilder=new p,this.serviceCatalogItemDetailBuilder=new u,this.search=new h}addMenuItem(e,t,s){const i=$(`#${s}`),a=$("<a>",{href:t,text:e}).addClass("service-catalog-nav-item nav-link"),r=i.children(":first");r.is("ul")?r.prepend($("<li>").append(a)):i.prepend(a)}buildServiceCatalog(){this.buildServiceCatalogHeaderSection(),$("main").append(o("mt-5")),this.apiService.fetchServiceCategoriesAndItems(this.buildUI,this.noAccessPage,{})}buildServiceCatalogHeaderSection(){const e=$("<section>"),t=$("<div>").addClass("jumbotron jumbotron-fluid service-catalog-header-container"),s=$("<h2>").addClass("service-catalog-header-label").text("Service Catalog"),i=$("<p>").addClass("service-catalog-description").text("Explore the Service Catalog to find a curated range of solutions to your needs");t.append(s,i),e.append(t),$("main").append(e)}buildUI=(e,t)=>{if(this.data=e,!function(e){return Object.keys(e).length>0}(e))return;const s=$("<section>").attr("id","service_catalog_section").addClass("service-catalog-section"),i=$("<div>").addClass("row"),a=$("<div>").addClass("col-2"),r=$("<p>").text("Categories").addClass("service-categories-heading"),n=$("<input>").attr("id","search_input").attr("type","text").attr("placeholder","search..."),o=$("<div>").append(n).addClass("service-catalog-search");a.append(r,o);const c={newSection:s,searchAndNavContainer:a,serviceCatalogContainer:i};this.createServiceCategoriesView(c)};createServiceCategoriesView(e){const t=$("<div>").attr("id","service_categories_list").addClass("service-categories-list"),s=this.generateNavbar();t.append(s);const i=e.newSection,a=e.searchAndNavContainer,r=e.serviceCatalogContainer;a.append(t);const n=this.serviceCatalogItemBuilder.build(this.data),o=$("<div>").attr("id","service_catalog_item_search_results_container").addClass("col-10 collapse service-catalog-search-results-container");r.append(a,n,o),i.append(r),$("main").append(i),this.serviceCatalogItemDetailBuilder.build(this.data),this.bindEventListeners()}generateNavbar(){const e=$("<ul>");let t=!1;const s=this.data.service_catalog_data;return $.each(s,(function(s,i){let a=$("<li>").append($("<a>").attr({id:s+"_link",href:"#_",target:"_blank"}).text(i.title));t||(t=!0,a.addClass("active")),e.append(a)})),e}bindEventListeners(){let e=null;const t=this,s=Object.keys(this.data.service_catalog_data).map((e=>"#"+e+"_link"));$(s.join(", ")).click((function(e){var i=$(this).attr("id");if($("#"+e.target.id).parent().hasClass("active"))return!1;$("#service_categories_list ul li.active").removeClass("active"),$("#"+e.target.id).parent().addClass("active"),e.preventDefault();var a=i.replace("_link","_container");$.each(s,(function(e,t){"#"+i===t||$(t.replace("_link","_container")).hide()})),$("[id*='detail_page_container']").hide();const r={serviceItemsContainerId:"#"+a.replace("_container","_service_items_container")},n=i.split("_")[0];t.apiService.fetchServiceCategoryItems(n,t.serviceCatalogItemBuilder.buildAndRenderServiceItems,r),$("#service_catalog_item_search_results_container").hide(),$("#"+a).show(),$("#"+a.replace("_container","_service_items_container")).show(),$("#service_items_container").show()})),$("#search_input").on("keyup",(function(s){s.preventDefault();const i=$(this).val().trim(),a=$("#service_items_container"),r=$("#service_catalog_item_search_results_container");$("#service_categories_list ul li.active"),0===i.length?(r.hide(),a.show()):(a.hide(),r.empty(),r.append(o("col-10")),r.show(),e&&clearTimeout(e),e=setTimeout((function(){t.apiService.fetchServiceCategoriesAndItems(t.search.updateResults,t.noAccessPage,{searchQuery:i,searchResultsContainer:r,itemBuilder:t.serviceCatalogItemBuilder,itemDetailBuilder:t.serviceCatalogItemDetailBuilder})}),500))}))}noAccessPage(){const e=$("<section>").attr("id","no_access_page_section").addClass("no-access-page-section"),t=$("<div>").addClass("d-flex flex-column align-items-center"),s=$("<img>").attr("src","https://raw.githubusercontent.com/mehboobali98/service-catalog/service_catalog/v1/assets/svg/no_access_image.svg").addClass("no-access-image"),i=$("<h4>").text("You do not have permission to access this page!"),a=$("<p>").text("Please contact your administrator to get access").addClass("next-steps-message"),r=$("<div>").addClass("d-flex mt-3 gap-3 justify-content-end"),n=$("<a>").attr("href","#_").text("Go Back").addClass("btn btn-outline-primary go-back-btn").click((function(){window.history.back()}));r.append(n),t.append(s,i,a,r),e.append(t),$("main").append(e)}}class g{constructor(e){this.ezoFieldId=e.ezoFieldId,this.ezoSubdomain=e.ezoSubdomain,this.ezoServiceItemFieldId=e.ezoServiceItemFieldId,a(this.filesToLoad(),(()=>{this.initialize()}))}initialize(){this.serviceCatalogBuilder=new v(this.ezoSubdomain),this.addServiceCatalogMenuItem(),this.initServiceCatalog()}addServiceCatalogMenuItem(){this.serviceCatalogBuilder.addMenuItem("Service Catalog","/hc/p/service_catalog","user-nav")}initServiceCatalog(){i(/\/hc(\/en-us)?\/p\/service_catalog/)?this.handleServiceCatalogRequest():i(/\/hc(\/en-us)?\/requests\/new/)?new l(this.ezoFieldId,this.ezoSubdomain,this.ezoServiceItemFieldId).updateRequestForm():i(/\/hc(\/en-us)?\/requests\/(\d+)/)&&new d(this.ezoFieldId,this.ezoSubdomain).updateRequestForm()}handleServiceCatalogRequest(){"anonymous"!==window.HelpCenter.user.role?this.serviceCatalogBuilder.buildServiceCatalog():window.location.href=function(){const e={};return e.return_to=window.location.href,`${window.location.origin}/hc/signin${$.param(e)}`}()}filesToLoad(){return[{type:"link",url:"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"},{type:"link",url:"https://mehboobali98.github.io/service-catalog/v1/service_catalog.css"},{type:"script",url:"https://code.jquery.com/jquery-3.6.0.min.js"}]}}return t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,